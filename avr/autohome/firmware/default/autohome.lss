
autohome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000009be  00000a52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004a  0080006c  0080006c  00000a5e  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  00000a60  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000026e  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f6f  00000000  00000000  00000d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005af  00000000  00000000  00001cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000af4  00000000  00000000  0000228c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00002d80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000536  00000000  00000000  00002e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ab  00000000  00000000  00003366  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00003911  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	68 c0       	rjmp	.+208    	; 0xd2 <__ctors_end>
   2:	c1 c2       	rjmp	.+1410   	; 0x586 <__vector_1>
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	80 c0       	rjmp	.+256    	; 0x108 <__bad_interrupt>
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	7e c0       	rjmp	.+252    	; 0x108 <__bad_interrupt>
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	7c c0       	rjmp	.+248    	; 0x108 <__bad_interrupt>
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	7a c0       	rjmp	.+244    	; 0x108 <__bad_interrupt>
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	78 c0       	rjmp	.+240    	; 0x108 <__bad_interrupt>
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	76 c0       	rjmp	.+236    	; 0x108 <__bad_interrupt>
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>

0000001e <usbDescriptorHidReport>:
  1e:	05 01 09 06 a1 01 85 01 05 07 19 e0 29 e7 15 00     ............)...
  2e:	25 01 75 01 95 08 81 02 95 06 75 08 25 65 19 00     %.u.......u.%e..
  3e:	29 65 81 00 c0 06 00 ff 09 01 a1 01 85 02 15 00     )e..............
  4e:	26 ff 00 75 08 95 80 09 00 b2 02 01 c0 05 0c 09     &..u............
  5e:	01 a1 01 85 03 05 0c 15 01 25 f0 19 00 29 f0 75     .........%...).u
  6e:	08 95 01 81 40 c0                                   ....@.

00000074 <usbDescriptorString0>:
  74:	04 03 09 04                                         ....

00000078 <usbDescriptorStringVendor>:
  78:	12 03 6f 00 62 00 64 00 65 00 76 00 2e 00 61 00     ..o.b.d.e.v...a.
  88:	74 00                                               t.

0000008a <usbDescriptorStringDevice>:
  8a:	14 03 55 00 53 00 42 00 52 00 65 00 6d 00 6f 00     ..U.S.B.R.e.m.o.
  9a:	74 00 65 00                                         t.e.

0000009e <usbDescriptorDevice>:
  9e:	12 01 10 01 00 00 00 08 c0 16 dc 05 00 01 01 02     ................
  ae:	00 01                                               ..

000000b0 <usbDescriptorConfiguration>:
  b0:	09 02 22 00 01 01 00 80 14 09 04 00 00 01 03 00     ..".............
  c0:	00 00 09 21 01 01 00 01 22 56 00 07 05 81 03 08     ...!...."V......
  d0:	00 64                                               .d

000000d2 <__ctors_end>:
  d2:	11 24       	eor	r1, r1
  d4:	1f be       	out	0x3f, r1	; 63
  d6:	cf e5       	ldi	r28, 0x5F	; 95
  d8:	d1 e0       	ldi	r29, 0x01	; 1
  da:	de bf       	out	0x3e, r29	; 62
  dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
  de:	10 e0       	ldi	r17, 0x00	; 0
  e0:	a0 e6       	ldi	r26, 0x60	; 96
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	ee eb       	ldi	r30, 0xBE	; 190
  e6:	f9 e0       	ldi	r31, 0x09	; 9
  e8:	02 c0       	rjmp	.+4      	; 0xee <.do_copy_data_start>

000000ea <.do_copy_data_loop>:
  ea:	05 90       	lpm	r0, Z+
  ec:	0d 92       	st	X+, r0

000000ee <.do_copy_data_start>:
  ee:	ac 36       	cpi	r26, 0x6C	; 108
  f0:	b1 07       	cpc	r27, r17
  f2:	d9 f7       	brne	.-10     	; 0xea <.do_copy_data_loop>

000000f4 <__do_clear_bss>:
  f4:	10 e0       	ldi	r17, 0x00	; 0
  f6:	ac e6       	ldi	r26, 0x6C	; 108
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a6 3b       	cpi	r26, 0xB6	; 182
 100:	b1 07       	cpc	r27, r17
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	15 d0       	rcall	.+42     	; 0x130 <main>
 106:	59 c4       	rjmp	.+2226   	; 0x9ba <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <usbFunctionSetup>:

/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
usbRequest_t    *rq = (void *)data;
 10a:	fc 01       	movw	r30, r24

    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* HID class request */
 10c:	80 81       	ld	r24, Z
 10e:	80 76       	andi	r24, 0x60	; 96
 110:	80 32       	cpi	r24, 0x20	; 32
 112:	61 f4       	brne	.+24     	; 0x12c <usbFunctionSetup+0x22>
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
 114:	81 81       	ldd	r24, Z+1	; 0x01
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	11 f0       	breq	.+4      	; 0x11e <usbFunctionSetup+0x14>
            /* since we have only one report type, we can ignore the report-ID */
            bytesRemaining = 128;
            currentAddress = 0;
            return USB_NO_MSG;  /* use usbFunctionRead() to obtain data */
        }else if(rq->bRequest == USBRQ_HID_SET_REPORT){
 11a:	89 30       	cpi	r24, 0x09	; 9
 11c:	39 f4       	brne	.+14     	; 0x12c <usbFunctionSetup+0x22>
            /* since we have only one report type, we can ignore the report-ID */
            bytesRemaining = 128;
 11e:	80 e8       	ldi	r24, 0x80	; 128
 120:	80 93 7d 00 	sts	0x007D, r24
            currentAddress = 0;
 124:	10 92 7c 00 	sts	0x007C, r1
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	08 95       	ret
            return USB_NO_MSG;  /* use usbFunctionWrite() to receive data from host */
 12c:	80 e0       	ldi	r24, 0x00	; 0
        }
    }else{
        /* ignore vendor type requests, we don't use any */
    }
    return 0;
}
 12e:	08 95       	ret

00000130 <main>:
/****************************************************************************
 * main()																	*
 *																			*
 *																			*
 ***************************************************************************/
int main(void) {
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
	
	uchar i;
	uchar calibrationValue;


    calibrationValue = eeprom_read_byte(0); /* calibration value from last time */
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	28 d4       	rcall	.+2128   	; 0x98e <__eerd_byte_tn45>
    if(calibrationValue != 0xff){
 13e:	8f 3f       	cpi	r24, 0xFF	; 255
 140:	09 f0       	breq	.+2      	; 0x144 <main+0x14>
        OSCCAL = calibrationValue;
 142:	81 bf       	out	0x31, r24	; 49
    }

	i2c_init();
 144:	84 d3       	rcall	.+1800   	; 0x84e <i2c_init>
	
    usbInit();
 146:	85 d0       	rcall	.+266    	; 0x252 <usbInit>
    usbDeviceDisconnect(); 
 148:	b8 9a       	sbi	0x17, 0	; 23
 14a:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 14c:	4d e1       	ldi	r20, 0x1D	; 29
 14e:	50 e1       	ldi	r21, 0x10	; 16
 150:	03 c0       	rjmp	.+6      	; 0x158 <main+0x28>
 152:	ca 01       	movw	r24, r20
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <main+0x24>

    i = 0;
    while(--i) {
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	d9 f7       	brne	.-10     	; 0x152 <main+0x22>
        _delay_ms(1);
    }

    usbDeviceConnect();
 15c:	b8 98       	cbi	0x17, 0	; 23

	DDRB &= ~_BV(DDB1);			// input from slave to indicate a msg is waiting
 15e:	b9 98       	cbi	0x17, 1	; 23

/////////
//	DDRB = 0b0010; // set pb1 as output
/////////
	
	sei();
 160:	78 94       	sei
 *
 *
 ***************************************************************************/
static void buildReport(void) {

	memset(reportBuffer, 0, 8);
 162:	c4 e7       	ldi	r28, 0x74	; 116
 164:	d0 e0       	ldi	r29, 0x00	; 0
 166:	08 e0       	ldi	r16, 0x08	; 8

    if(reportCount == 0){
    	reportBuffer[0] = 3;
		reportBuffer[1] = keys[action - 1];
    } else {
	    reportBuffer[0] = 3;
 168:	13 e0       	ldi	r17, 0x03	; 3
	
	sei();

    for(;;) {

        usbPoll();
 16a:	a1 d0       	rcall	.+322    	; 0x2ae <usbPoll>

		if (PINB & _BV(PB1)) {
 16c:	b1 9b       	sbis	0x16, 1	; 22
 16e:	0e c0       	rjmp	.+28     	; 0x18c <__stack+0x2d>
			while (PINB & _BV(PB1)) {
 170:	b1 99       	sbic	0x16, 1	; 22
 172:	fe cf       	rjmp	.-4      	; 0x170 <__stack+0x11>
				// wait until off
			}

			i2c_start((DEVICE_ID << 1) + I2C_READ);
 174:	85 ea       	ldi	r24, 0xA5	; 165
 176:	70 d3       	rcall	.+1760   	; 0x858 <i2c_start>
			action = i2c_read(0);
 178:	ab d3       	rcall	.+1878   	; 0x8d0 <i2c_readNak>
 17a:	80 93 6d 00 	sts	0x006D, r24
			i2c_stop();
 17e:	84 d3       	rcall	.+1800   	; 0x888 <i2c_stop>

			if (action <= sizeof(keys)/sizeof(uchar)) {
 180:	80 91 6d 00 	lds	r24, 0x006D
 184:	89 30       	cpi	r24, 0x09	; 9
 186:	10 f4       	brcc	.+4      	; 0x18c <__stack+0x2d>
				reportCount = 0;
 188:	10 92 68 00 	sts	0x0068, r1
			}
		}

		if(usbInterruptIsReady() && (reportCount < 2)){ /* we can send another key */
 18c:	80 91 8b 00 	lds	r24, 0x008B
 190:	84 ff       	sbrs	r24, 4
 192:	eb cf       	rjmp	.-42     	; 0x16a <__stack+0xb>
 194:	90 91 68 00 	lds	r25, 0x0068
 198:	92 30       	cpi	r25, 0x02	; 2
 19a:	38 f7       	brcc	.-50     	; 0x16a <__stack+0xb>
 *
 *
 ***************************************************************************/
static void buildReport(void) {

	memset(reportBuffer, 0, 8);
 19c:	fe 01       	movw	r30, r28
 19e:	80 2f       	mov	r24, r16
 1a0:	11 92       	st	Z+, r1
 1a2:	8a 95       	dec	r24
 1a4:	e9 f7       	brne	.-6      	; 0x1a0 <__stack+0x41>

    if(reportCount == 0){
 1a6:	99 23       	and	r25, r25
 1a8:	59 f4       	brne	.+22     	; 0x1c0 <__stack+0x61>
    	reportBuffer[0] = 3;
 1aa:	10 93 74 00 	sts	0x0074, r17
		reportBuffer[1] = keys[action - 1];
 1ae:	e0 91 6d 00 	lds	r30, 0x006D
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	e1 5a       	subi	r30, 0xA1	; 161
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	80 81       	ld	r24, Z
 1ba:	80 93 75 00 	sts	0x0075, r24
 1be:	04 c0       	rjmp	.+8      	; 0x1c8 <__stack+0x69>
    } else {
	    reportBuffer[0] = 3;
 1c0:	10 93 74 00 	sts	0x0074, r17
    	reportBuffer[1] = 0;
 1c4:	10 92 75 00 	sts	0x0075, r1
	}

	action = 0;
 1c8:	10 92 6d 00 	sts	0x006D, r1

	reportCount++;
 1cc:	9f 5f       	subi	r25, 0xFF	; 255
 1ce:	90 93 68 00 	sts	0x0068, r25
			}
		}

		if(usbInterruptIsReady() && (reportCount < 2)){ /* we can send another key */
        	buildReport();
           	usbSetInterrupt(reportBuffer, sizeof(reportBuffer));
 1d2:	84 e7       	ldi	r24, 0x74	; 116
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	68 e0       	ldi	r22, 0x08	; 8
 1d8:	49 d0       	rcall	.+146    	; 0x26c <usbSetInterrupt>
 1da:	c7 cf       	rjmp	.-114    	; 0x16a <__stack+0xb>

000001dc <usbFunctionWrite>:

/* usbFunctionWrite() is called when the host sends a chunk of data to the
 * device. For more information see the documentation in usbdrv/usbdrv.h.
 */
uchar   usbFunctionWrite(uchar *data, uchar len)
{
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	ec 01       	movw	r28, r24

	if (data[0] == 0) return 1;
 1e2:	88 81       	ld	r24, Y
 1e4:	88 23       	and	r24, r24
 1e6:	91 f0       	breq	.+36     	; 0x20c <usbFunctionWrite+0x30>
	if (data[1] == 0) return 1;
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	88 23       	and	r24, r24
 1ec:	79 f0       	breq	.+30     	; 0x20c <usbFunctionWrite+0x30>

	if (data[1] == 2) { // get current room temperature
 1ee:	82 30       	cpi	r24, 0x02	; 2
 1f0:	41 f0       	breq	.+16     	; 0x202 <usbFunctionWrite+0x26>
		i2c_start((DEVICE_ID << 1) + I2C_WRITE);
		i2c_write(data[1]);
		i2c_stop();

	} else if (data[1] == 3) { // switch aircon ON
 1f2:	83 30       	cpi	r24, 0x03	; 3
 1f4:	31 f0       	breq	.+12     	; 0x202 <usbFunctionWrite+0x26>
		i2c_start((DEVICE_ID << 1) + I2C_WRITE);
		i2c_write(data[1]);
		i2c_stop();

	} else if (data[1] == 4) { // switch aircon OFF
 1f6:	84 30       	cpi	r24, 0x04	; 4
 1f8:	21 f0       	breq	.+8      	; 0x202 <usbFunctionWrite+0x26>
		i2c_start((DEVICE_ID << 1) + I2C_WRITE);
		i2c_write(data[1]);
		i2c_stop();

	} else if (data[1] == 0x05) { // toggle light
 1fa:	85 30       	cpi	r24, 0x05	; 5
 1fc:	11 f0       	breq	.+4      	; 0x202 <usbFunctionWrite+0x26>
		i2c_start((DEVICE_ID << 1) + I2C_WRITE);
		i2c_write(data[1]);
		i2c_stop();

	} else if (data[1] == 0x06) { // switch light
 1fe:	86 30       	cpi	r24, 0x06	; 6
 200:	29 f4       	brne	.+10     	; 0x20c <usbFunctionWrite+0x30>
		i2c_start((DEVICE_ID << 1) + I2C_WRITE);
 202:	84 ea       	ldi	r24, 0xA4	; 164
 204:	29 d3       	rcall	.+1618   	; 0x858 <i2c_start>
		i2c_write(data[1]);
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	47 d3       	rcall	.+1678   	; 0x898 <i2c_write>
		i2c_stop();
 20a:	3e d3       	rcall	.+1660   	; 0x888 <i2c_stop>
    eeprom_write_block(data, (uchar *)0 + currentAddress, len);
    currentAddress += len;
    bytesRemaining -= len;
    return bytesRemaining == 0; // return 1 if this was the last chunk
*/
}
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <usbFunctionRead>:
/* ------------------------------------------------------------------------- */

/* usbFunctionRead() is called when the host requests a chunk of data from
 * the device. For more information see the documentation in usbdrv/usbdrv.h.
 */
uchar   usbFunctionRead(uchar *data, uchar len) {
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	ec 01       	movw	r28, r24
	//_delay_ms(25);
	//memset(data, 0x31, 6);

//working!
	// get temperature
	i2c_start((DEVICE_ID << 1) + I2C_READ);
 21a:	85 ea       	ldi	r24, 0xA5	; 165
 21c:	1d d3       	rcall	.+1594   	; 0x858 <i2c_start>
 21e:	8a ef       	ldi	r24, 0xFA	; 250
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	2c e9       	ldi	r18, 0x9C	; 156
 224:	31 e0       	ldi	r19, 0x01	; 1
 226:	f9 01       	movw	r30, r18
 228:	31 97       	sbiw	r30, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <usbFunctionRead+0x14>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 22c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 22e:	d9 f7       	brne	.-10     	; 0x226 <usbFunctionRead+0x12>
	_delay_ms(25);
	data[0] = i2c_read(1);
 230:	51 d3       	rcall	.+1698   	; 0x8d4 <i2c_readAck>
 232:	88 83       	st	Y, r24
	data[1] = i2c_read(1);
 234:	4f d3       	rcall	.+1694   	; 0x8d4 <i2c_readAck>
 236:	89 83       	std	Y+1, r24	; 0x01
	data[2] = i2c_read(1);
 238:	4d d3       	rcall	.+1690   	; 0x8d4 <i2c_readAck>
 23a:	8a 83       	std	Y+2, r24	; 0x02
	data[3] = i2c_read(1);
 23c:	4b d3       	rcall	.+1686   	; 0x8d4 <i2c_readAck>
 23e:	8b 83       	std	Y+3, r24	; 0x03
	data[4] = i2c_read(1);
 240:	49 d3       	rcall	.+1682   	; 0x8d4 <i2c_readAck>
 242:	8c 83       	std	Y+4, r24	; 0x04
	data[5] = i2c_read(0);
 244:	45 d3       	rcall	.+1674   	; 0x8d0 <i2c_readNak>
 246:	8d 83       	std	Y+5, r24	; 0x05
	i2c_stop();
 248:	1f d3       	rcall	.+1598   	; 0x888 <i2c_stop>
    eeprom_read_block(data, (uchar *)0 + currentAddress, len);
    currentAddress += len;
    bytesRemaining -= len;
    return len;
*/	
}
 24a:	86 e0       	ldi	r24, 0x06	; 6
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 252:	85 b7       	in	r24, 0x35	; 53
 254:	82 60       	ori	r24, 0x02	; 2
 256:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 258:	8b b7       	in	r24, 0x3b	; 59
 25a:	80 64       	ori	r24, 0x40	; 64
 25c:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 25e:	8b e4       	ldi	r24, 0x4B	; 75
 260:	80 93 8c 00 	sts	0x008C, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 264:	8a e5       	ldi	r24, 0x5A	; 90
 266:	80 93 8b 00 	sts	0x008B, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
 26a:	08 95       	ret

0000026c <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 26c:	1f 93       	push	r17
 26e:	dc 01       	movw	r26, r24
 270:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 272:	80 91 8b 00 	lds	r24, 0x008B
 276:	84 ff       	sbrs	r24, 4
 278:	07 c0       	rjmp	.+14     	; 0x288 <usbSetInterrupt+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 27a:	80 91 8c 00 	lds	r24, 0x008C
 27e:	98 e8       	ldi	r25, 0x88	; 136
 280:	89 27       	eor	r24, r25
 282:	80 93 8c 00 	sts	0x008C, r24
 286:	03 c0       	rjmp	.+6      	; 0x28e <usbSetInterrupt+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 288:	8a e5       	ldi	r24, 0x5A	; 90
 28a:	80 93 8b 00 	sts	0x008B, r24
 28e:	91 2f       	mov	r25, r17
 290:	ed e8       	ldi	r30, 0x8D	; 141
 292:	f0 e0       	ldi	r31, 0x00	; 0
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 294:	8d 91       	ld	r24, X+
 296:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 298:	91 50       	subi	r25, 0x01	; 1
 29a:	e1 f7       	brne	.-8      	; 0x294 <usbSetInterrupt+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
 29c:	8d e8       	ldi	r24, 0x8D	; 141
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	61 2f       	mov	r22, r17
 2a2:	5a d1       	rcall	.+692    	; 0x558 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 2a4:	1c 5f       	subi	r17, 0xFC	; 252
 2a6:	10 93 8b 00 	sts	0x008B, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 2aa:	1f 91       	pop	r17
 2ac:	08 95       	ret

000002ae <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 2b4:	60 91 9c 00 	lds	r22, 0x009C
 2b8:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
 2ba:	67 fd       	sbrc	r22, 7
 2bc:	bd c0       	rjmp	.+378    	; 0x438 <usbPoll+0x18a>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 2be:	80 91 99 00 	lds	r24, 0x0099
 2c2:	cc e0       	ldi	r28, 0x0C	; 12
 2c4:	d0 e0       	ldi	r29, 0x00	; 0
 2c6:	c8 1b       	sub	r28, r24
 2c8:	d1 09       	sbc	r29, r1
 2ca:	c0 56       	subi	r28, 0x60	; 96
 2cc:	df 4f       	sbci	r29, 0xFF	; 255
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 2ce:	80 91 98 00 	lds	r24, 0x0098
 2d2:	8d 32       	cpi	r24, 0x2D	; 45
 2d4:	09 f0       	breq	.+2      	; 0x2d8 <usbPoll+0x2a>
 2d6:	9e c0       	rjmp	.+316    	; 0x414 <usbPoll+0x166>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 2d8:	68 30       	cpi	r22, 0x08	; 8
 2da:	09 f0       	breq	.+2      	; 0x2de <usbPoll+0x30>
 2dc:	ab c0       	rjmp	.+342    	; 0x434 <usbPoll+0x186>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 2de:	83 ec       	ldi	r24, 0xC3	; 195
 2e0:	80 93 80 00 	sts	0x0080, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 2e4:	8a e5       	ldi	r24, 0x5A	; 90
 2e6:	80 93 69 00 	sts	0x0069, r24
        usbMsgFlags = 0;
 2ea:	10 92 7f 00 	sts	0x007F, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 2ee:	88 81       	ld	r24, Y
 2f0:	80 76       	andi	r24, 0x60	; 96
 2f2:	39 f0       	breq	.+14     	; 0x302 <usbPoll+0x54>
            replyLen = usbFunctionSetup(data);
 2f4:	ce 01       	movw	r24, r28
 2f6:	09 df       	rcall	.-494    	; 0x10a <usbFunctionSetup>
 2f8:	28 2f       	mov	r18, r24
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
 2fa:	8f 3f       	cpi	r24, 0xFF	; 255
 2fc:	09 f4       	brne	.+2      	; 0x300 <usbPoll+0x52>
 2fe:	79 c0       	rjmp	.+242    	; 0x3f2 <usbPoll+0x144>
 300:	7f c0       	rjmp	.+254    	; 0x400 <usbPoll+0x152>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 302:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 304:	10 92 89 00 	sts	0x0089, r1
    SWITCH_START(rq->bRequest)
 308:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 30a:	88 23       	and	r24, r24
 30c:	21 f4       	brne	.+8      	; 0x316 <usbPoll+0x68>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 30e:	10 92 8a 00 	sts	0x008A, r1
 312:	22 e0       	ldi	r18, 0x02	; 2
 314:	67 c0       	rjmp	.+206    	; 0x3e4 <usbPoll+0x136>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 316:	85 30       	cpi	r24, 0x05	; 5
 318:	19 f4       	brne	.+6      	; 0x320 <usbPoll+0x72>
        usbNewDeviceAddr = value;
 31a:	90 93 9d 00 	sts	0x009D, r25
 31e:	61 c0       	rjmp	.+194    	; 0x3e2 <usbPoll+0x134>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 320:	86 30       	cpi	r24, 0x06	; 6
 322:	09 f0       	breq	.+2      	; 0x326 <usbPoll+0x78>
 324:	4a c0       	rjmp	.+148    	; 0x3ba <usbPoll+0x10c>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 326:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	19 f4       	brne	.+6      	; 0x332 <usbPoll+0x84>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 32c:	8e e9       	ldi	r24, 0x9E	; 158
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	1b c0       	rjmp	.+54     	; 0x368 <usbPoll+0xba>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 332:	82 30       	cpi	r24, 0x02	; 2
 334:	41 f4       	brne	.+16     	; 0x346 <usbPoll+0x98>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 336:	80 eb       	ldi	r24, 0xB0	; 176
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	90 93 9b 00 	sts	0x009B, r25
 33e:	80 93 9a 00 	sts	0x009A, r24
 342:	22 e2       	ldi	r18, 0x22	; 34
 344:	36 c0       	rjmp	.+108    	; 0x3b2 <usbPoll+0x104>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 346:	83 30       	cpi	r24, 0x03	; 3
 348:	f9 f4       	brne	.+62     	; 0x388 <usbPoll+0xda>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
 34c:	88 23       	and	r24, r24
 34e:	41 f4       	brne	.+16     	; 0x360 <usbPoll+0xb2>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 350:	84 e7       	ldi	r24, 0x74	; 116
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	90 93 9b 00 	sts	0x009B, r25
 358:	80 93 9a 00 	sts	0x009A, r24
 35c:	24 e0       	ldi	r18, 0x04	; 4
 35e:	29 c0       	rjmp	.+82     	; 0x3b2 <usbPoll+0x104>
        SWITCH_CASE(1)
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	41 f4       	brne	.+16     	; 0x374 <usbPoll+0xc6>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 364:	88 e7       	ldi	r24, 0x78	; 120
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	90 93 9b 00 	sts	0x009B, r25
 36c:	80 93 9a 00 	sts	0x009A, r24
 370:	22 e1       	ldi	r18, 0x12	; 18
 372:	1f c0       	rjmp	.+62     	; 0x3b2 <usbPoll+0x104>
        SWITCH_CASE(2)
 374:	82 30       	cpi	r24, 0x02	; 2
 376:	e1 f4       	brne	.+56     	; 0x3b0 <usbPoll+0x102>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 378:	8a e8       	ldi	r24, 0x8A	; 138
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	90 93 9b 00 	sts	0x009B, r25
 380:	80 93 9a 00 	sts	0x009A, r24
 384:	24 e1       	ldi	r18, 0x14	; 20
 386:	15 c0       	rjmp	.+42     	; 0x3b2 <usbPoll+0x104>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 388:	81 32       	cpi	r24, 0x21	; 33
 38a:	41 f4       	brne	.+16     	; 0x39c <usbPoll+0xee>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 38c:	82 ec       	ldi	r24, 0xC2	; 194
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	90 93 9b 00 	sts	0x009B, r25
 394:	80 93 9a 00 	sts	0x009A, r24
 398:	29 e0       	ldi	r18, 0x09	; 9
 39a:	0b c0       	rjmp	.+22     	; 0x3b2 <usbPoll+0x104>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 39c:	82 32       	cpi	r24, 0x22	; 34
 39e:	41 f4       	brne	.+16     	; 0x3b0 <usbPoll+0x102>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 3a0:	8e e1       	ldi	r24, 0x1E	; 30
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	90 93 9b 00 	sts	0x009B, r25
 3a8:	80 93 9a 00 	sts	0x009A, r24
 3ac:	26 e5       	ldi	r18, 0x56	; 86
 3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <usbPoll+0x104>
 3b0:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 3b2:	80 e4       	ldi	r24, 0x40	; 64
 3b4:	80 93 7f 00 	sts	0x007F, r24
 3b8:	23 c0       	rjmp	.+70     	; 0x400 <usbPoll+0x152>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 3ba:	88 30       	cpi	r24, 0x08	; 8
 3bc:	21 f4       	brne	.+8      	; 0x3c6 <usbPoll+0x118>
 3be:	21 e0       	ldi	r18, 0x01	; 1
 3c0:	8f e9       	ldi	r24, 0x9F	; 159
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	11 c0       	rjmp	.+34     	; 0x3e8 <usbPoll+0x13a>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 3c6:	89 30       	cpi	r24, 0x09	; 9
 3c8:	19 f4       	brne	.+6      	; 0x3d0 <usbPoll+0x122>
        usbConfiguration = value;
 3ca:	90 93 9f 00 	sts	0x009F, r25
 3ce:	09 c0       	rjmp	.+18     	; 0x3e2 <usbPoll+0x134>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 3d0:	8a 30       	cpi	r24, 0x0A	; 10
 3d2:	11 f4       	brne	.+4      	; 0x3d8 <usbPoll+0x12a>
 3d4:	21 e0       	ldi	r18, 0x01	; 1
 3d6:	06 c0       	rjmp	.+12     	; 0x3e4 <usbPoll+0x136>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 3d8:	8b 30       	cpi	r24, 0x0B	; 11
 3da:	19 f4       	brne	.+6      	; 0x3e2 <usbPoll+0x134>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 3dc:	8b e4       	ldi	r24, 0x4B	; 75
 3de:	80 93 8c 00 	sts	0x008C, r24
 3e2:	20 e0       	ldi	r18, 0x00	; 0
 3e4:	89 e8       	ldi	r24, 0x89	; 137
 3e6:	90 e0       	ldi	r25, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 3e8:	90 93 9b 00 	sts	0x009B, r25
 3ec:	80 93 9a 00 	sts	0x009A, r24
 3f0:	07 c0       	rjmp	.+14     	; 0x400 <usbPoll+0x152>
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
 3f2:	88 81       	ld	r24, Y
 3f4:	87 fd       	sbrc	r24, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
 3f6:	2e 81       	ldd	r18, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
 3f8:	80 e8       	ldi	r24, 0x80	; 128
 3fa:	80 93 7f 00 	sts	0x007F, r24
 3fe:	06 c0       	rjmp	.+12     	; 0x40c <usbPoll+0x15e>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 400:	8f 81       	ldd	r24, Y+7	; 0x07
 402:	88 23       	and	r24, r24
 404:	19 f4       	brne	.+6      	; 0x40c <usbPoll+0x15e>
 406:	8e 81       	ldd	r24, Y+6	; 0x06
 408:	82 17       	cp	r24, r18
 40a:	08 f0       	brcs	.+2      	; 0x40e <usbPoll+0x160>
 40c:	82 2f       	mov	r24, r18
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 40e:	80 93 6a 00 	sts	0x006A, r24
 412:	10 c0       	rjmp	.+32     	; 0x434 <usbPoll+0x186>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 414:	80 91 7f 00 	lds	r24, 0x007F
 418:	87 ff       	sbrs	r24, 7
 41a:	0c c0       	rjmp	.+24     	; 0x434 <usbPoll+0x186>
            uchar rval = usbFunctionWrite(data, len);
 41c:	ce 01       	movw	r24, r28
 41e:	de de       	rcall	.-580    	; 0x1dc <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
 420:	8f 3f       	cpi	r24, 0xFF	; 255
 422:	21 f4       	brne	.+8      	; 0x42c <usbPoll+0x17e>
                usbTxLen = USBPID_STALL;
 424:	8e e1       	ldi	r24, 0x1E	; 30
 426:	80 93 69 00 	sts	0x0069, r24
 42a:	04 c0       	rjmp	.+8      	; 0x434 <usbPoll+0x186>
            }else if(rval != 0){    /* This was the final package */
 42c:	88 23       	and	r24, r24
 42e:	11 f0       	breq	.+4      	; 0x434 <usbPoll+0x186>
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
 430:	10 92 6a 00 	sts	0x006A, r1
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 434:	10 92 9c 00 	sts	0x009C, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 438:	80 91 69 00 	lds	r24, 0x0069
 43c:	84 ff       	sbrs	r24, 4
 43e:	58 c0       	rjmp	.+176    	; 0x4f0 <usbPoll+0x242>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 440:	80 91 6a 00 	lds	r24, 0x006A
 444:	8f 3f       	cpi	r24, 0xFF	; 255
 446:	09 f4       	brne	.+2      	; 0x44a <usbPoll+0x19c>
 448:	53 c0       	rjmp	.+166    	; 0x4f0 <usbPoll+0x242>
 44a:	18 2f       	mov	r17, r24
 44c:	89 30       	cpi	r24, 0x09	; 9
 44e:	08 f0       	brcs	.+2      	; 0x452 <usbPoll+0x1a4>
 450:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 452:	81 1b       	sub	r24, r17
 454:	80 93 6a 00 	sts	0x006A, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 458:	80 91 80 00 	lds	r24, 0x0080
 45c:	98 e8       	ldi	r25, 0x88	; 136
 45e:	89 27       	eor	r24, r25
 460:	80 93 80 00 	sts	0x0080, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 464:	11 23       	and	r17, r17
 466:	91 f1       	breq	.+100    	; 0x4cc <usbPoll+0x21e>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 468:	80 91 7f 00 	lds	r24, 0x007F
 46c:	87 ff       	sbrs	r24, 7
 46e:	08 c0       	rjmp	.+16     	; 0x480 <usbPoll+0x1d2>
            len = usbFunctionRead(data, len);
 470:	81 e8       	ldi	r24, 0x81	; 129
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	61 2f       	mov	r22, r17
 476:	ce de       	rcall	.-612    	; 0x214 <usbFunctionRead>
 478:	18 2f       	mov	r17, r24
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
 47a:	89 30       	cpi	r24, 0x09	; 9
 47c:	98 f5       	brcc	.+102    	; 0x4e4 <usbPoll+0x236>
 47e:	26 c0       	rjmp	.+76     	; 0x4cc <usbPoll+0x21e>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 480:	20 91 9a 00 	lds	r18, 0x009A
 484:	30 91 9b 00 	lds	r19, 0x009B
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 488:	86 ff       	sbrs	r24, 6
 48a:	0d c0       	rjmp	.+26     	; 0x4a6 <usbPoll+0x1f8>
 48c:	a1 e8       	ldi	r26, 0x81	; 129
 48e:	b0 e0       	ldi	r27, 0x00	; 0
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 494:	f9 01       	movw	r30, r18
 496:	e8 0f       	add	r30, r24
 498:	f9 1f       	adc	r31, r25
 49a:	e4 91       	lpm	r30, Z+
                    *data++ = c;
 49c:	ed 93       	st	X+, r30
 49e:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
 4a0:	18 17       	cp	r17, r24
 4a2:	c1 f7       	brne	.-16     	; 0x494 <usbPoll+0x1e6>
 4a4:	08 c0       	rjmp	.+16     	; 0x4b6 <usbPoll+0x208>
 4a6:	d9 01       	movw	r26, r18
 4a8:	91 2f       	mov	r25, r17
 4aa:	e1 e8       	ldi	r30, 0x81	; 129
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
 4ae:	8d 91       	ld	r24, X+
 4b0:	81 93       	st	Z+, r24
                }while(--i);
 4b2:	91 50       	subi	r25, 0x01	; 1
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <usbPoll+0x200>
 4b6:	11 50       	subi	r17, 0x01	; 1
 4b8:	81 2f       	mov	r24, r17
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	1f 5f       	subi	r17, 0xFF	; 255
 4be:	01 96       	adiw	r24, 0x01	; 1
 4c0:	82 0f       	add	r24, r18
 4c2:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
 4c4:	90 93 9b 00 	sts	0x009B, r25
 4c8:	80 93 9a 00 	sts	0x009A, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 4cc:	81 e8       	ldi	r24, 0x81	; 129
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	61 2f       	mov	r22, r17
 4d2:	42 d0       	rcall	.+132    	; 0x558 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 4d4:	61 2f       	mov	r22, r17
 4d6:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 4d8:	6c 30       	cpi	r22, 0x0C	; 12
 4da:	41 f0       	breq	.+16     	; 0x4ec <usbPoll+0x23e>
            usbMsgLen = USB_NO_MSG;
 4dc:	8f ef       	ldi	r24, 0xFF	; 255
 4de:	80 93 6a 00 	sts	0x006A, r24
 4e2:	04 c0       	rjmp	.+8      	; 0x4ec <usbPoll+0x23e>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
 4e4:	8f ef       	ldi	r24, 0xFF	; 255
 4e6:	80 93 6a 00 	sts	0x006A, r24
 4ea:	6e e1       	ldi	r22, 0x1E	; 30
    }
    usbTxLen = len;
 4ec:	60 93 69 00 	sts	0x0069, r22
 4f0:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 4f2:	86 b3       	in	r24, 0x16	; 22
        if(usbLineStatus != 0)  /* SE0 has ended */
 4f4:	85 70       	andi	r24, 0x05	; 5
 4f6:	31 f4       	brne	.+12     	; 0x504 <usbPoll+0x256>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 4f8:	91 50       	subi	r25, 0x01	; 1
 4fa:	d9 f7       	brne	.-10     	; 0x4f2 <usbPoll+0x244>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 4fc:	10 92 9d 00 	sts	0x009D, r1
    usbDeviceAddr = 0;
 500:	10 92 97 00 	sts	0x0097, r1

static inline void usbHandleResetHook(uchar notResetState)
{
#ifdef USB_RESET_HOOK
static uchar    wasReset;
uchar           isReset = !notResetState;
 504:	10 e0       	ldi	r17, 0x00	; 0
 506:	99 23       	and	r25, r25
 508:	09 f4       	brne	.+2      	; 0x50c <usbPoll+0x25e>
 50a:	11 e0       	ldi	r17, 0x01	; 1

    if(wasReset != isReset){
 50c:	80 91 7e 00 	lds	r24, 0x007E
 510:	81 17       	cp	r24, r17
 512:	49 f0       	breq	.+18     	; 0x526 <usbPoll+0x278>
        USB_RESET_HOOK(isReset);
 514:	11 23       	and	r17, r17
 516:	29 f4       	brne	.+10     	; 0x522 <usbPoll+0x274>
 518:	f9 d1       	rcall	.+1010   	; 0x90c <calibrateOscillator>
 51a:	61 b7       	in	r22, 0x31	; 49
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	3e d2       	rcall	.+1148   	; 0x99e <__eewr_byte_tn45>
        wasReset = isReset;
 522:	10 93 7e 00 	sts	0x007E, r17
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	1f 91       	pop	r17
 52c:	08 95       	ret

0000052e <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 52e:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 530:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 532:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 534:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 536:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 538:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 53a:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 53c:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 53e:	09 c0       	rjmp	.+18     	; 0x552 <usbCrcLoopEntry>

00000540 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 540:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 542:	82 27       	eor	r24, r18

00000544 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 544:	97 95       	ror	r25
    ror     resCrcL
 546:	87 95       	ror	r24
    brcs    usbCrcNoXor
 548:	10 f0       	brcs	.+4      	; 0x54e <usbCrcNoXor>
    eor     resCrcL, polyL
 54a:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 54c:	95 27       	eor	r25, r21

0000054e <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 54e:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 550:	c8 f3       	brcs	.-14     	; 0x544 <usbCrcBitLoop>

00000552 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 552:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 554:	a8 f3       	brcs	.-22     	; 0x540 <usbCrcByteLoop>

00000556 <usbCrcReady>:
usbCrcReady:
    ret
 556:	08 95       	ret

00000558 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 558:	ea df       	rcall	.-44     	; 0x52e <usbCrc16>
    st      ptr+, resCrcL
 55a:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 55c:	9d 93       	st	X+, r25
    ret
 55e:	08 95       	ret

00000560 <usbMeasureFrameLength>:

; extern unsigned usbMeasurePacketLength(void);
; returns time between two idle strobes in multiples of 7 CPU clocks
.global usbMeasureFrameLength
usbMeasureFrameLength:
    ldi     cntH, 6         ; wait ~ 10 ms for D- == 0
 560:	a6 e0       	ldi	r26, 0x06	; 6
    clr     cnt16L
 562:	88 27       	eor	r24, r24
    clr     cnt16H
 564:	99 27       	eor	r25, r25

00000566 <usbMFTime16>:
usbMFTime16:
    dec     cntH
 566:	aa 95       	dec	r26
    breq    usbMFTimeout
 568:	69 f0       	breq	.+26     	; 0x584 <usbMFTimeout>

0000056a <usbMFWaitStrobe>:
usbMFWaitStrobe:            ; first wait for D- == 0 (idle strobe)
    sbiw    cnt16, 1        ;[0] [6]
 56a:	01 97       	sbiw	r24, 0x01	; 1
    breq    usbMFTime16     ;[2]
 56c:	e1 f3       	breq	.-8      	; 0x566 <usbMFTime16>
    sbic    USBIN, USBMINUS ;[3]
 56e:	b0 99       	sbic	0x16, 0	; 22
    rjmp    usbMFWaitStrobe ;[4]
 570:	fc cf       	rjmp	.-8      	; 0x56a <usbMFWaitStrobe>

00000572 <usbMFWaitIdle>:
usbMFWaitIdle:              ; then wait until idle again
    sbis    USBIN, USBMINUS ;1 wait for D- == 1
 572:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    usbMFWaitIdle   ;2
 574:	fe cf       	rjmp	.-4      	; 0x572 <usbMFWaitIdle>
    ldi     cnt16L, 1       ;1 represents cycles so far
 576:	81 e0       	ldi	r24, 0x01	; 1
    clr     cnt16H          ;1
 578:	99 27       	eor	r25, r25

0000057a <usbMFWaitLoop>:
usbMFWaitLoop:
    in      cntH, USBIN     ;[0] [7]
 57a:	a6 b3       	in	r26, 0x16	; 22
    adiw    cnt16, 1        ;[1]
 57c:	01 96       	adiw	r24, 0x01	; 1
    breq    usbMFTimeout    ;[3]
 57e:	11 f0       	breq	.+4      	; 0x584 <usbMFTimeout>
    andi    cntH, USBMASK   ;[4]
 580:	a5 70       	andi	r26, 0x05	; 5
    brne    usbMFWaitLoop   ;[5]
 582:	d9 f7       	brne	.-10     	; 0x57a <usbMFWaitLoop>

00000584 <usbMFTimeout>:
usbMFTimeout:
#if resL != cnt16L
    mov     resL, cnt16L
    mov     resH, cnt16H
#endif
    ret
 584:	08 95       	ret

00000586 <__vector_1>:
; when instruction starts


USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], r0, YH, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-23] push only what is necessary to sync with edge ASAP
 586:	cf 93       	push	r28
    in      YL, SREG            ;[-21]
 588:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-20]
 58a:	cf 93       	push	r28

0000058c <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 58c:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 58e:	b0 9b       	sbis	0x16, 0	; 22
    brne    waitForJ        ; just make sure we have ANY timeout
 590:	e9 f7       	brne	.-6      	; 0x58c <waitForJ>

00000592 <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-15]
 592:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK              ;[-14]
 594:	0b c0       	rjmp	.+22     	; 0x5ac <foundK>
    sbis    USBIN, USBMINUS
 596:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 598:	09 c0       	rjmp	.+18     	; 0x5ac <foundK>
    sbis    USBIN, USBMINUS
 59a:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 59c:	07 c0       	rjmp	.+14     	; 0x5ac <foundK>
    sbis    USBIN, USBMINUS
 59e:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 5a0:	05 c0       	rjmp	.+10     	; 0x5ac <foundK>
    sbis    USBIN, USBMINUS
 5a2:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 5a4:	03 c0       	rjmp	.+6      	; 0x5ac <foundK>
    sbis    USBIN, USBMINUS
 5a6:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 5a8:	01 c0       	rjmp	.+2      	; 0x5ac <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 5aa:	d5 c0       	rjmp	.+426    	; 0x756 <sofError>

000005ac <foundK>:
foundK:                         ;[-12]
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 5 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    r0                  ;[-12]
 5ac:	0f 92       	push	r0
;   [---]                       ;[-11]
    push    YH                  ;[-10]
 5ae:	df 93       	push	r29
;   [---]                       ;[-9]
    lds     YL, usbInputBufOffset;[-8]
 5b0:	c0 91 99 00 	lds	r28, 0x0099
;   [---]                       ;[-7]
    clr     YH                  ;[-6]
 5b4:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-5] [rx loop init]
 5b6:	c0 56       	subi	r28, 0x60	; 96
    sbci    YH, hi8(-(usbRxBuf));[-4] [rx loop init]
 5b8:	df 4f       	sbci	r29, 0xFF	; 255
    mov     r0, x2              ;[-3] [rx loop init]
 5ba:	01 2e       	mov	r0, r17
    sbis    USBIN, USBMINUS     ;[-2] we want two bits K (sample 2 cycles too early)
 5bc:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    haveTwoBitsK        ;[-1]
 5be:	03 c0       	rjmp	.+6      	; 0x5c6 <haveTwoBitsK>
    pop     YH                  ;[0] undo the pushes from before
 5c0:	df 91       	pop	r29
    pop     r0                  ;[2]
 5c2:	0f 90       	pop	r0
    rjmp    waitForK            ;[4] this was not the end of sync, retry
 5c4:	e6 cf       	rjmp	.-52     	; 0x592 <waitForK>

000005c6 <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:               ;[1]
    push    shift           ;[1]
 5c6:	2f 93       	push	r18
    push    x1              ;[3]
 5c8:	0f 93       	push	r16
    push    x2              ;[5]
 5ca:	1f 93       	push	r17
    push    x3              ;[7]
 5cc:	4f 93       	push	r20
    ldi     shift, 0xff     ;[9] [rx loop init]
 5ce:	2f ef       	ldi	r18, 0xFF	; 255
    ori     x3, 0xff        ;[10] [rx loop init] == ser x3, clear zero flag
 5d0:	4f 6f       	ori	r20, 0xFF	; 255

    in      x1, USBIN       ;[11] <-- sample bit 0
 5d2:	06 b3       	in	r16, 0x16	; 22
    bst     x1, USBMINUS    ;[12]
 5d4:	00 fb       	bst	r16, 0
    bld     shift, 0        ;[13]
 5d6:	20 f9       	bld	r18, 0
    push    x4              ;[14] == phase
 5d8:	5f 93       	push	r21
;   [---]                   ;[15]
    push    cnt             ;[16]
 5da:	3f 93       	push	r19
;   [---]                   ;[17]
    ldi     phase, 0        ;[18] [rx loop init]
 5dc:	50 e0       	ldi	r21, 0x00	; 0
    ldi     cnt, USB_BUFSIZE;[19] [rx loop init]
 5de:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit1          ;[20]
 5e0:	65 c0       	rjmp	.+202    	; 0x6ac <rxbit1>

000005e2 <continueWithBit5>:
bit 7: jump, fixup bitstuff
; 87 [+ 2] cycles
------------------------------------------------------------------
*/
continueWithBit5:
    in      x2, USBIN       ;[055] <-- bit 5
 5e2:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[056]
 5e4:	01 26       	eor	r0, r17
    or      phase, r0       ;[057]
 5e6:	50 29       	or	r21, r0
    sbrc    phase, USBMINUS ;[058]
 5e8:	50 fd       	sbrc	r21, 0
    lpm                     ;[059] optional nop3; modifies r0
 5ea:	c8 95       	lpm
    in      phase, USBIN    ;[060] <-- phase
 5ec:	56 b3       	in	r21, 0x16	; 22
    eor     x1, x2          ;[061]
 5ee:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[062]
 5f0:	00 fb       	bst	r16, 0
    bld     shift, 5        ;[063]
 5f2:	25 f9       	bld	r18, 5
    andi    shift, 0x3f     ;[064]
 5f4:	2f 73       	andi	r18, 0x3F	; 63
    in      x1, USBIN       ;[065] <-- bit 6
 5f6:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff5        ;[066] *** unstuff escape
 5f8:	b1 f0       	breq	.+44     	; 0x626 <unstuff5>
    eor     phase, x1       ;[067]
 5fa:	50 27       	eor	r21, r16
    eor     x2, x1          ;[068]
 5fc:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[069]
 5fe:	10 fb       	bst	r17, 0
    bld     shift, 6        ;[070]
 600:	26 f9       	bld	r18, 6

00000602 <didUnstuff6>:
didUnstuff6:                ;[   ]
    in      r0, USBIN       ;[071] <-- phase
 602:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x02     ;[072]
 604:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6        ;[073] *** unstuff escape
 606:	f0 f0       	brcs	.+60     	; 0x644 <unstuff6>

00000608 <didUnstuff5>:
didUnstuff5:                ;[   ]
    nop2                    ;[074]
 608:	00 c0       	rjmp	.+0      	; 0x60a <didUnstuff5+0x2>
;   [---]                   ;[075]
    in      x2, USBIN       ;[076] <-- bit 7
 60a:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2          ;[077]
 60c:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[078]
 60e:	00 fb       	bst	r16, 0
    bld     shift, 7        ;[079]
 610:	27 f9       	bld	r18, 7

00000612 <didUnstuff7>:
didUnstuff7:                ;[   ]
    eor     r0, x2          ;[080]
 612:	01 26       	eor	r0, r17
    or      phase, r0       ;[081]
 614:	50 29       	or	r21, r0
    in      r0, USBIN       ;[082] <-- phase
 616:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x04     ;[083]
 618:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop          ;[084]
 61a:	e8 f5       	brcc	.+122    	; 0x696 <rxLoop>

0000061c <unstuff7>:
;   [---]                   ;[085]
unstuff7:                   ;[   ]
    andi    x3, ~0x80       ;[085]
 61c:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80     ;[086]
 61e:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN       ;[087] <-- sample stuffed bit 7
 620:	16 b3       	in	r17, 0x16	; 22
    nop                     ;[088]
 622:	00 00       	nop
    rjmp    didUnstuff7     ;[089]
 624:	f6 cf       	rjmp	.-20     	; 0x612 <didUnstuff7>

00000626 <unstuff5>:
;   [---]                   ;[090]
                            ;[080]

unstuff5:                   ;[067]
    eor     phase, x1       ;[068]
 626:	50 27       	eor	r21, r16
    andi    x3, ~0x20       ;[069]
 628:	4f 7d       	andi	r20, 0xDF	; 223
    ori     shift, 0x20     ;[070]
 62a:	20 62       	ori	r18, 0x20	; 32
    in      r0, USBIN       ;[071] <-- phase
 62c:	06 b2       	in	r0, 0x16	; 22
    mov     x2, x1          ;[072]
 62e:	10 2f       	mov	r17, r16
    nop                     ;[073]
 630:	00 00       	nop
    nop2                    ;[074]
 632:	00 c0       	rjmp	.+0      	; 0x634 <unstuff5+0xe>
;   [---]                   ;[075]
    in      x1, USBIN       ;[076] <-- bit 6
 634:	06 b3       	in	r16, 0x16	; 22
    eor     r0, x1          ;[077]
 636:	00 26       	eor	r0, r16
    or      phase, r0       ;[078]
 638:	50 29       	or	r21, r0
    eor     x2, x1          ;[079]
 63a:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[080]
 63c:	10 fb       	bst	r17, 0
    bld     shift, 6        ;[081] no need to check bitstuffing, we just had one
 63e:	26 f9       	bld	r18, 6
    in      r0, USBIN       ;[082] <-- phase
 640:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff5     ;[083]
 642:	e2 cf       	rjmp	.-60     	; 0x608 <didUnstuff5>

00000644 <unstuff6>:
;   [---]                   ;[084]
                            ;[074]

unstuff6:                   ;[074]
    andi    x3, ~0x40       ;[075]
 644:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN       ;[076] <-- bit 6 again
 646:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x40     ;[077]
 648:	20 64       	ori	r18, 0x40	; 64
    nop2                    ;[078]
 64a:	00 c0       	rjmp	.+0      	; 0x64c <unstuff6+0x8>
;   [---]                   ;[079]
    rjmp    didUnstuff6     ;[080]
 64c:	da cf       	rjmp	.-76     	; 0x602 <didUnstuff6>

0000064e <unstuff0>:
;   [---]                   ;[081]
                            ;[071]

unstuff0:                   ;[013]
    eor     r0, x2          ;[014]
 64e:	01 26       	eor	r0, r17
    or      phase, r0       ;[015]
 650:	50 29       	or	r21, r0
    andi    x2, USBMASK     ;[016] check for SE0
 652:	15 70       	andi	r17, 0x05	; 5
    in      r0, USBIN       ;[017] <-- phase
 654:	06 b2       	in	r0, 0x16	; 22
    breq    didUnstuff0     ;[018] direct jump to se0 would be too long
 656:	69 f1       	breq	.+90     	; 0x6b2 <didUnstuff0>
    andi    x3, ~0x01       ;[019]
 658:	4e 7f       	andi	r20, 0xFE	; 254
    ori     shift, 0x01     ;[020]
 65a:	21 60       	ori	r18, 0x01	; 1
    mov     x1, x2          ;[021] mov existing sample
 65c:	01 2f       	mov	r16, r17
    in      x2, USBIN       ;[022] <-- bit 1 again
 65e:	16 b3       	in	r17, 0x16	; 22
    rjmp    didUnstuff0     ;[023]
 660:	28 c0       	rjmp	.+80     	; 0x6b2 <didUnstuff0>

00000662 <unstuff1>:
;   [---]                   ;[024]
                            ;[014]

unstuff1:                   ;[024]
    eor     r0, x1          ;[025]
 662:	00 26       	eor	r0, r16
    or      phase, r0       ;[026]
 664:	50 29       	or	r21, r0
    andi    x3, ~0x02       ;[027]
 666:	4d 7f       	andi	r20, 0xFD	; 253
    in      r0, USBIN       ;[028] <-- phase
 668:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x02     ;[029]
 66a:	22 60       	ori	r18, 0x02	; 2
    mov     x2, x1          ;[030]
 66c:	10 2f       	mov	r17, r16
    rjmp    didUnstuff1     ;[031]
 66e:	29 c0       	rjmp	.+82     	; 0x6c2 <didUnstuff1>

00000670 <unstuff2>:
;   [---]                   ;[032]
                            ;[022]

unstuff2:                   ;[035]
    eor     r0, x2          ;[036]
 670:	01 26       	eor	r0, r17
    or      phase, r0       ;[037]
 672:	50 29       	or	r21, r0
    andi    x3, ~0x04       ;[038]
 674:	4b 7f       	andi	r20, 0xFB	; 251
    in      r0, USBIN       ;[039] <-- phase
 676:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x04     ;[040]
 678:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2          ;[041]
 67a:	01 2f       	mov	r16, r17
    rjmp    didUnstuff2     ;[042]
 67c:	2d c0       	rjmp	.+90     	; 0x6d8 <didUnstuff2>

0000067e <unstuff3>:
;   [---]                   ;[043]
                            ;[033]

unstuff3:                   ;[043]
    in      x2, USBIN       ;[044] <-- bit 3 again
 67e:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[045]
 680:	01 26       	eor	r0, r17
    or      phase, r0       ;[046]
 682:	50 29       	or	r21, r0
    andi    x3, ~0x08       ;[047]
 684:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08     ;[048]
 686:	28 60       	ori	r18, 0x08	; 8
    nop                     ;[049]
 688:	00 00       	nop
    in      r0, USBIN       ;[050] <-- phase
 68a:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff3     ;[051]
 68c:	2e c0       	rjmp	.+92     	; 0x6ea <didUnstuff3>

0000068e <unstuff4>:
;   [---]                   ;[052]
                            ;[042]

unstuff4:                   ;[053]
    andi    x3, ~0x10       ;[054]
 68e:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN       ;[055] <-- bit 4 again
 690:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x10     ;[056]
 692:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4     ;[057]
 694:	30 c0       	rjmp	.+96     	; 0x6f6 <didUnstuff4>

00000696 <rxLoop>:
;   [---]                   ;[058]
                            ;[048]

rxLoop:                     ;[085]
    eor     x3, shift       ;[086] reconstruct: x3 is 0 at bit locations we changed, 1 at others
 696:	42 27       	eor	r20, r18
    in      x1, USBIN       ;[000] <-- bit 0
 698:	06 b3       	in	r16, 0x16	; 22
    st      y+, x3          ;[001]
 69a:	49 93       	st	Y+, r20
;   [---]                   ;[002]
    eor     r0, x1          ;[003]
 69c:	00 26       	eor	r0, r16
    or      phase, r0       ;[004]
 69e:	50 29       	or	r21, r0
    eor     x2, x1          ;[005]
 6a0:	10 27       	eor	r17, r16
    in      r0, USBIN       ;[006] <-- phase
 6a2:	06 b2       	in	r0, 0x16	; 22
    ser     x3              ;[007]
 6a4:	4f ef       	ldi	r20, 0xFF	; 255
    bst     x2, USBMINUS    ;[008]
 6a6:	10 fb       	bst	r17, 0
    bld     shift, 0        ;[009]
 6a8:	20 f9       	bld	r18, 0
    andi    shift, 0xf9     ;[010]
 6aa:	29 7f       	andi	r18, 0xF9	; 249

000006ac <rxbit1>:
rxbit1:                     ;[   ]
    in      x2, USBIN       ;[011] <-- bit 1
 6ac:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff0        ;[012] *** unstuff escape
 6ae:	79 f2       	breq	.-98     	; 0x64e <unstuff0>
    andi    x2, USBMASK     ;[013] SE0 check for bit 1
 6b0:	15 70       	andi	r17, 0x05	; 5

000006b2 <didUnstuff0>:
didUnstuff0:                ;[   ] Z only set if we detected SE0 in bitstuff
    breq    se0             ;[014]
 6b2:	59 f1       	breq	.+86     	; 0x70a <se0>
    eor     r0, x2          ;[015]
 6b4:	01 26       	eor	r0, r17
    or      phase, r0       ;[016]
 6b6:	50 29       	or	r21, r0
    in      r0, USBIN       ;[017] <-- phase
 6b8:	06 b2       	in	r0, 0x16	; 22
    eor     x1, x2          ;[018]
 6ba:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[019]
 6bc:	00 fb       	bst	r16, 0
    bld     shift, 1        ;[020]
 6be:	21 f9       	bld	r18, 1
    andi    shift, 0xf3     ;[021]
 6c0:	23 7f       	andi	r18, 0xF3	; 243

000006c2 <didUnstuff1>:
didUnstuff1:                ;[   ]
    in      x1, USBIN       ;[022] <-- bit 2
 6c2:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff1        ;[023] *** unstuff escape
 6c4:	71 f2       	breq	.-100    	; 0x662 <unstuff1>
    eor     r0, x1          ;[024]
 6c6:	00 26       	eor	r0, r16
    or      phase, r0       ;[025]
 6c8:	50 29       	or	r21, r0
    subi    cnt, 1          ;[026] overflow check
 6ca:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow        ;[027]
 6cc:	d0 f0       	brcs	.+52     	; 0x702 <overflow>
    in      r0, USBIN       ;[028] <-- phase
 6ce:	06 b2       	in	r0, 0x16	; 22
    eor     x2, x1          ;[029]
 6d0:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[030]
 6d2:	10 fb       	bst	r17, 0
    bld     shift, 2        ;[031]
 6d4:	22 f9       	bld	r18, 2
    andi    shift, 0xe7     ;[032]
 6d6:	27 7e       	andi	r18, 0xE7	; 231

000006d8 <didUnstuff2>:
didUnstuff2:                ;[   ]
    in      x2, USBIN       ;[033] <-- bit 3
 6d8:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff2        ;[034] *** unstuff escape
 6da:	51 f2       	breq	.-108    	; 0x670 <unstuff2>
    eor     r0, x2          ;[035]
 6dc:	01 26       	eor	r0, r17
    or      phase, r0       ;[036]
 6de:	50 29       	or	r21, r0
    eor     x1, x2          ;[037]
 6e0:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[038]
 6e2:	00 fb       	bst	r16, 0
    in      r0, USBIN       ;[039] <-- phase
 6e4:	06 b2       	in	r0, 0x16	; 22
    bld     shift, 3        ;[040]
 6e6:	23 f9       	bld	r18, 3
    andi    shift, 0xcf     ;[041]
 6e8:	2f 7c       	andi	r18, 0xCF	; 207

000006ea <didUnstuff3>:
didUnstuff3:                ;[   ]
    breq    unstuff3        ;[042] *** unstuff escape
 6ea:	49 f2       	breq	.-110    	; 0x67e <unstuff3>
    nop                     ;[043]
 6ec:	00 00       	nop
    in      x1, USBIN       ;[044] <-- bit 4
 6ee:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1          ;[045]
 6f0:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[046]
 6f2:	10 fb       	bst	r17, 0
    bld     shift, 4        ;[047]
 6f4:	24 f9       	bld	r18, 4

000006f6 <didUnstuff4>:
didUnstuff4:                ;[   ]
    eor     r0, x1          ;[048]
 6f6:	00 26       	eor	r0, r16
    or      phase, r0       ;[049]
 6f8:	50 29       	or	r21, r0
    in      r0, USBIN       ;[050] <-- phase
 6fa:	06 b2       	in	r0, 0x16	; 22
    andi    shift, 0x9f     ;[051]
 6fc:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4        ;[052] *** unstuff escape
 6fe:	39 f2       	breq	.-114    	; 0x68e <unstuff4>
    rjmp    continueWithBit5;[053]
 700:	70 cf       	rjmp	.-288    	; 0x5e2 <continueWithBit5>

00000702 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 702:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 704:	1a bf       	out	0x3a, r17	; 58

00000706 <ignorePacket>:
ignorePacket:
    clr     token
 706:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 708:	19 c0       	rjmp	.+50     	; 0x73c <handleSetupOrOut>

0000070a <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 70a:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 70c:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 70e:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 710:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 712:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 714:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
 716:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 718:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 71a:	09 f1       	breq	.+66     	; 0x75e <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 71c:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 71e:	f9 f0       	breq	.+62     	; 0x75e <handleData>
    lds     shift, usbDeviceAddr;[17]
 720:	20 91 97 00 	lds	r18, 0x0097
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 724:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 726:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 728:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 72a:	ed cf       	rjmp	.-38     	; 0x706 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 72c:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 72e:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 730:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 732:	51 f1       	breq	.+84     	; 0x788 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 734:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 736:	11 f0       	breq	.+4      	; 0x73c <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 738:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 73a:	29 f7       	brne	.-54     	; 0x706 <ignorePacket>

0000073c <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 73c:	00 93 9e 00 	sts	0x009E, r16

00000740 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 740:	3f 91       	pop	r19
 742:	5f 91       	pop	r21
 744:	4f 91       	pop	r20
 746:	1f 91       	pop	r17
 748:	0f 91       	pop	r16
 74a:	2f 91       	pop	r18
 74c:	df 91       	pop	r29
 74e:	0f 90       	pop	r0
    USB_LOAD_PENDING(YL)        ;[49]
 750:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 752:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 754:	1b cf       	rjmp	.-458    	; 0x58c <waitForJ>

00000756 <sofError>:
sofError:
    POP_RETI                    ;macro call
 756:	cf 91       	pop	r28
 758:	cf bf       	out	0x3f, r28	; 63
 75a:	cf 91       	pop	r28
    reti
 75c:	18 95       	reti

0000075e <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 75e:	20 91 9e 00 	lds	r18, 0x009E
    tst     shift               ;[20]
 762:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 764:	69 f3       	breq	.-38     	; 0x740 <doReturn>
    lds     x2, usbRxLen        ;[22]
 766:	10 91 9c 00 	lds	r17, 0x009C
    tst     x2                  ;[24]
 76a:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 76c:	79 f5       	brne	.+94     	; 0x7cc <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 76e:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 770:	7a f1       	brmi	.+94     	; 0x7d0 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 772:	30 93 9c 00 	sts	0x009C, r19
    sts     usbRxToken, shift   ;[30]
 776:	20 93 98 00 	sts	0x0098, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
 77a:	10 91 99 00 	lds	r17, 0x0099
    ldi     cnt, USB_BUFSIZE    ;[34]
 77e:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 780:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 782:	30 93 99 00 	sts	0x0099, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 786:	24 c0       	rjmp	.+72     	; 0x7d0 <sendAckAndReti>

00000788 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 788:	00 91 9c 00 	lds	r16, 0x009C
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 78c:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 78e:	f4 f4       	brge	.+60     	; 0x7cc <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 790:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 792:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 794:	49 f4       	brne	.+18     	; 0x7a8 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 796:	30 91 69 00 	lds	r19, 0x0069
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 79a:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 79c:	1a c0       	rjmp	.+52     	; 0x7d2 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 79e:	00 93 69 00 	sts	0x0069, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
 7a2:	c0 e8       	ldi	r28, 0x80	; 128
    ldi     YH, hi8(usbTxBuf)   ;[44]
 7a4:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 7a6:	19 c0       	rjmp	.+50     	; 0x7da <usbSendAndReti>

000007a8 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 7a8:	30 91 8b 00 	lds	r19, 0x008B
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 7ac:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 7ae:	11 c0       	rjmp	.+34     	; 0x7d2 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 7b0:	00 93 8b 00 	sts	0x008B, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 7b4:	cc e8       	ldi	r28, 0x8C	; 140
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 7b6:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 7b8:	10 c0       	rjmp	.+32     	; 0x7da <usbSendAndReti>

000007ba <bitstuff7>:
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Spec allows 7.5 bit times from EOP to SOP for replies

bitstuff7:
    eor     x1, x4          ;[4]
 7ba:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[5]
 7bc:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[6] C is zero (brcc)
 7be:	00 c0       	rjmp	.+0      	; 0x7c0 <bitstuff7+0x6>
    rjmp    didStuff7       ;[8]
 7c0:	21 c0       	rjmp	.+66     	; 0x804 <didStuff7>

000007c2 <bitstuffN>:

bitstuffN:
    eor     x1, x4          ;[5]
 7c2:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6]
 7c4:	10 e0       	ldi	r17, 0x00	; 0
    lpm                     ;[7] 3 cycle NOP, modifies r0
 7c6:	c8 95       	lpm
    out     USBOUT, x1      ;[10] <-- out
 7c8:	08 bb       	out	0x18, r16	; 24
    rjmp    didStuffN       ;[0]
 7ca:	14 c0       	rjmp	.+40     	; 0x7f4 <didStuffN>

000007cc <sendNakAndReti>:

#define bitStatus   x3

sendNakAndReti:
    ldi     cnt, USBPID_NAK ;[-19]
 7cc:	3a e5       	ldi	r19, 0x5A	; 90
    rjmp    sendCntAndReti  ;[-18]
 7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <sendCntAndReti>

000007d0 <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
 7d0:	32 ed       	ldi	r19, 0xD2	; 210

000007d2 <sendCntAndReti>:
sendCntAndReti:
    mov     r0, cnt         ;[-16]
 7d2:	03 2e       	mov	r0, r19
    ldi     YL, 0           ;[-15] R0 address is 0
 7d4:	c0 e0       	ldi	r28, 0x00	; 0
    ldi     YH, 0           ;[-14]
 7d6:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
 7d8:	32 e0       	ldi	r19, 0x02	; 2

000007da <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte [range 2 ... 12]
;uses: x1...x4, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
 7da:	17 b3       	in	r17, 0x17	; 23
    ori     x2, USBMASK     ;[-11]
 7dc:	15 60       	ori	r17, 0x05	; 5
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 7de:	c0 9a       	sbi	0x18, 0	; 24
    in      x1, USBOUT      ;[-8] port mirror for tx loop
 7e0:	08 b3       	in	r16, 0x18	; 24
    out     USBDDR, x2      ;[-7] <- acquire bus
 7e2:	17 bb       	out	0x17, r17	; 23
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
 7e4:	55 e0       	ldi	r21, 0x05	; 5
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
 7e6:	20 e8       	ldi	r18, 0x80	; 128
    ldi     bitStatus, 0xff ;[-4] init bit loop counter, works for up to 12 bytes
 7e8:	4f ef       	ldi	r20, 0xFF	; 255

000007ea <bitloop>:
byteloop:
bitloop:
    sbrs    shift, 0        ;[8] [-3]
 7ea:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[9] [-2]
 7ec:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[10] [-1] <-- out
 7ee:	08 bb       	out	0x18, r16	; 24
    ror     shift           ;[0]
 7f0:	27 95       	ror	r18
    ror     x2              ;[1]
 7f2:	17 95       	ror	r17

000007f4 <didStuffN>:
didStuffN:
    cpi     x2, 0xfc        ;[2]
 7f4:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[3]
 7f6:	28 f7       	brcc	.-54     	; 0x7c2 <bitstuffN>
    nop                     ;[4]
 7f8:	00 00       	nop
    subi    bitStatus, 37   ;[5] 256 / 7 ~=~ 37
 7fa:	45 52       	subi	r20, 0x25	; 37
    brcc    bitloop         ;[6] when we leave the loop, bitStatus has almost the initial value
 7fc:	b0 f7       	brcc	.-20     	; 0x7ea <bitloop>
    sbrs    shift, 0        ;[7]
 7fe:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[8]
 800:	05 27       	eor	r16, r21
    ror     shift           ;[9]
 802:	27 95       	ror	r18

00000804 <didStuff7>:
didStuff7:
    out     USBOUT, x1      ;[10] <-- out
 804:	08 bb       	out	0x18, r16	; 24
    ror     x2              ;[0]
 806:	17 95       	ror	r17
    cpi     x2, 0xfc        ;[1]
 808:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff7       ;[2]
 80a:	b8 f6       	brcc	.-82     	; 0x7ba <bitstuff7>
    ld      shift, y+       ;[3]
 80c:	29 91       	ld	r18, Y+
    dec     cnt             ;[5]
 80e:	3a 95       	dec	r19
    brne    byteloop        ;[6]
 810:	61 f7       	brne	.-40     	; 0x7ea <bitloop>
;make SE0:
    cbr     x1, USBMASK     ;[7] prepare SE0 [spec says EOP may be 21 to 25 cycles]
 812:	0a 7f       	andi	r16, 0xFA	; 250
    lds     x2, usbNewDeviceAddr;[8]
 814:	10 91 9d 00 	lds	r17, 0x009D
    lsl     x2              ;[10] we compare with left shifted address
 818:	11 0f       	add	r17, r17
    out     USBOUT, x1      ;[11] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
 81a:	08 bb       	out	0x18, r16	; 24
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    subi    YL, 2           ;[0] Only assign address on data packets, not ACK/NAK in r0
 81c:	c2 50       	subi	r28, 0x02	; 2
    sbci    YH, 0           ;[1]
 81e:	d0 40       	sbci	r29, 0x00	; 0
    breq    skipAddrAssign  ;[2]
 820:	11 f0       	breq	.+4      	; 0x826 <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
 822:	10 93 97 00 	sts	0x0097, r17

00000826 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[4] int0 occurred during TX -- clear pending flag
 826:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)   ;[5]
 828:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE     ;[6]
 82a:	01 60       	ori	r16, 0x01	; 1
    in      x2, USBDDR      ;[7]
 82c:	17 b3       	in	r17, 0x17	; 23
    cbr     x2, USBMASK     ;[8] set both pins to input
 82e:	1a 7f       	andi	r17, 0xFA	; 250
    mov     x3, x1          ;[9]
 830:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[10] configure no pullup on both pins
 832:	4a 7f       	andi	r20, 0xFA	; 250
    ldi     x4, 4           ;[11]
 834:	54 e0       	ldi	r21, 0x04	; 4

00000836 <se0Delay>:
se0Delay:
    dec     x4              ;[12] [15] [18] [21]
 836:	5a 95       	dec	r21
    brne    se0Delay        ;[13] [16] [19] [22]
 838:	f1 f7       	brne	.-4      	; 0x836 <se0Delay>
    out     USBOUT, x1      ;[23] <-- out J (idle) -- end of SE0 (EOP signal)
 83a:	08 bb       	out	0x18, r16	; 24
    out     USBDDR, x2      ;[24] <-- release bus now
 83c:	17 bb       	out	0x17, r17	; 23
    out     USBOUT, x3      ;[25] <-- ensure no pull-up resistors are active
 83e:	48 bb       	out	0x18, r20	; 24
    rjmp    doReturn
 840:	7f cf       	rjmp	.-258    	; 0x740 <doReturn>

00000842 <i2c_delay_T2>:
; function for 8Mhz chip
; R. Altenburg
	.global i2c_delay_T2
	.func i2c_delay_T2	; delay 5.0 microsec with 8 Mhz crystal	
i2c_delay_T2:				; 4 cycles
	ldi r16, 0x0			; 1   "
 842:	00 e0       	ldi	r16, 0x00	; 0

00000844 <i2c_delay_loop>:
i2c_delay_loop:	
	inc r16    			 	; 1   "
 844:	03 95       	inc	r16
	cpi r16, 0x20			; 1	  "
 846:	00 32       	cpi	r16, 0x20	; 32
	brne  i2c_delay_loop	; 1 false, 2 true
 848:	e9 f7       	brne	.-6      	; 0x844 <i2c_delay_loop>
	nop						; 1   cycle
 84a:	00 00       	nop
	ret						; 3   "
 84c:	08 95       	ret

0000084e <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
 84e:	bb 98       	cbi	0x17, 3	; 23
	cbi SCL_DDR,SCL		;release SCL
 850:	bc 98       	cbi	0x17, 4	; 23
	cbi SDA_OUT,SDA
 852:	c3 98       	cbi	0x18, 3	; 24
	cbi SCL_OUT,SCL
 854:	c4 98       	cbi	0x18, 4	; 24
	ret
 856:	08 95       	ret

00000858 <i2c_start>:
;	addr = r24, return = r25(=0):r24
;*************************************************************************
	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
 858:	bb 9a       	sbi	0x17, 3	; 23
	rcall 	i2c_delay_T2	;delay T/2
 85a:	f3 df       	rcall	.-26     	; 0x842 <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
 85c:	1d d0       	rcall	.+58     	; 0x898 <i2c_write>
	ret
 85e:	08 95       	ret

00000860 <i2c_rep_start>:
;	addr = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
 860:	bc 9a       	sbi	0x17, 4	; 23
	rcall 	i2c_delay_T2	;delay  T/2
 862:	ef df       	rcall	.-34     	; 0x842 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
 864:	bb 98       	cbi	0x17, 3	; 23
	rcall	i2c_delay_T2	;delay T/2
 866:	ed df       	rcall	.-38     	; 0x842 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
 868:	bc 98       	cbi	0x17, 4	; 23
	rcall 	i2c_delay_T2	;delay  T/2
 86a:	eb df       	rcall	.-42     	; 0x842 <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
 86c:	bb 9a       	sbi	0x17, 3	; 23
	rcall 	i2c_delay_T2	;delay	T/2
 86e:	e9 df       	rcall	.-46     	; 0x842 <i2c_delay_T2>
	
	rcall	i2c_write	;write address
 870:	13 d0       	rcall	.+38     	; 0x898 <i2c_write>
	ret
 872:	08 95       	ret

00000874 <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
 874:	08 2e       	mov	r0, r24

00000876 <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
 876:	bb 9a       	sbi	0x17, 3	; 23
	rcall 	i2c_delay_T2	;delay T/2
 878:	e4 df       	rcall	.-56     	; 0x842 <i2c_delay_T2>
	mov	r24,__tmp_reg__
 87a:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
 87c:	0d d0       	rcall	.+26     	; 0x898 <i2c_write>
	tst	r24		;if device not busy -> done
 87e:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
 880:	11 f0       	breq	.+4      	; 0x886 <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
 882:	02 d0       	rcall	.+4      	; 0x888 <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
 884:	f8 cf       	rjmp	.-16     	; 0x876 <i2c_start_wait1>

00000886 <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
 886:	08 95       	ret

00000888 <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
 888:	bc 9a       	sbi	0x17, 4	; 23
	sbi	SDA_DDR,SDA	;force SDA low
 88a:	bb 9a       	sbi	0x17, 3	; 23
	rcall	i2c_delay_T2	;delay T/2
 88c:	da df       	rcall	.-76     	; 0x842 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
 88e:	bc 98       	cbi	0x17, 4	; 23
	rcall	i2c_delay_T2	;delay T/2
 890:	d8 df       	rcall	.-80     	; 0x842 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
 892:	bb 98       	cbi	0x17, 3	; 23
	rcall	i2c_delay_T2	;delay T/2
 894:	d6 df       	rcall	.-84     	; 0x842 <i2c_delay_T2>
	ret
 896:	08 95       	ret

00000898 <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
 898:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
 89a:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
 89c:	01 c0       	rjmp	.+2      	; 0x8a0 <i2c_write_first>

0000089e <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
 89e:	88 0f       	add	r24, r24

000008a0 <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
 8a0:	59 f0       	breq	.+22     	; 0x8b8 <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
 8a2:	bc 9a       	sbi	0x17, 4	; 23
	brcc	i2c_write_low
 8a4:	18 f4       	brcc	.+6      	; 0x8ac <i2c_write_low>
	nop
 8a6:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
 8a8:	bb 98       	cbi	0x17, 3	; 23
	rjmp	i2c_write_high
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <i2c_write_high>

000008ac <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
 8ac:	bb 9a       	sbi	0x17, 3	; 23
	rjmp	i2c_write_high
 8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <i2c_write_high>

000008b0 <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
 8b0:	c8 df       	rcall	.-112    	; 0x842 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
 8b2:	bc 98       	cbi	0x17, 4	; 23
	rcall	i2c_delay_T2	;delay T/2
 8b4:	c6 df       	rcall	.-116    	; 0x842 <i2c_delay_T2>
	rjmp	i2c_write_bit
 8b6:	f3 cf       	rjmp	.-26     	; 0x89e <i2c_write_bit>

000008b8 <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
 8b8:	bc 9a       	sbi	0x17, 4	; 23
	cbi	SDA_DDR,SDA	;release SDA
 8ba:	bb 98       	cbi	0x17, 3	; 23
	rcall	i2c_delay_T2	;delay T/2
 8bc:	c2 df       	rcall	.-124    	; 0x842 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
 8be:	bc 98       	cbi	0x17, 4	; 23

000008c0 <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
 8c0:	b4 9b       	sbis	0x16, 4	; 22
	rjmp	i2c_ack_wait
 8c2:	fe cf       	rjmp	.-4      	; 0x8c0 <i2c_ack_wait>
	
	clr	r24		;return 0
 8c4:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
 8c6:	b3 99       	sbic	0x16, 3	; 22
	ldi	r24,1
 8c8:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
 8ca:	bb df       	rcall	.-138    	; 0x842 <i2c_delay_T2>
	clr	r25
 8cc:	99 27       	eor	r25, r25
	ret
 8ce:	08 95       	ret

000008d0 <i2c_readNak>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
 8d0:	88 27       	eor	r24, r24
	rjmp	i2c_read
 8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <i2c_read>

000008d4 <i2c_readAck>:
i2c_readAck:
	ldi	r24,0x01
 8d4:	81 e0       	ldi	r24, 0x01	; 1

000008d6 <i2c_read>:
i2c_read:
	ldi	r23,0x01	;data = 0x01
 8d6:	71 e0       	ldi	r23, 0x01	; 1

000008d8 <i2c_read_bit>:
i2c_read_bit:
	sbi	SCL_DDR,SCL	;force SCL low
 8d8:	bc 9a       	sbi	0x17, 4	; 23
	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
 8da:	bb 98       	cbi	0x17, 3	; 23
	rcall	i2c_delay_T2	;delay T/2
 8dc:	b2 df       	rcall	.-156    	; 0x842 <i2c_delay_T2>
	
	cbi	SCL_DDR,SCL	;release SCL
 8de:	bc 98       	cbi	0x17, 4	; 23
	rcall	i2c_delay_T2	;delay T/2
 8e0:	b0 df       	rcall	.-160    	; 0x842 <i2c_delay_T2>

000008e2 <i2c_read_stretch>:
	
i2c_read_stretch:
    sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
 8e2:	b4 9b       	sbis	0x16, 4	; 22
    rjmp	i2c_read_stretch
 8e4:	fe cf       	rjmp	.-4      	; 0x8e2 <i2c_read_stretch>
    	
	clc			;clear carry flag
 8e6:	88 94       	clc
	sbic	SDA_IN,SDA	;if SDA is high
 8e8:	b3 99       	sbic	0x16, 3	; 22
	sec			;  set carry flag
 8ea:	08 94       	sec
	
	rol	r23		;store bit
 8ec:	77 1f       	adc	r23, r23
	brcc	i2c_read_bit	;while receive register not full
 8ee:	a0 f7       	brcc	.-24     	; 0x8d8 <i2c_read_bit>

000008f0 <i2c_put_ack>:
	
i2c_put_ack:
	sbi	SCL_DDR,SCL	;force SCL low	
 8f0:	bc 9a       	sbi	0x17, 4	; 23
	cpi	r24,1
 8f2:	81 30       	cpi	r24, 0x01	; 1
	breq	i2c_put_ack_low	;if (ack=0)
 8f4:	11 f0       	breq	.+4      	; 0x8fa <i2c_put_ack_low>
	cbi	SDA_DDR,SDA	;      release SDA
 8f6:	bb 98       	cbi	0x17, 3	; 23
	rjmp	i2c_put_ack_high
 8f8:	01 c0       	rjmp	.+2      	; 0x8fc <i2c_put_ack_high>

000008fa <i2c_put_ack_low>:
i2c_put_ack_low:                ;else
	sbi	SDA_DDR,SDA	;      force SDA low
 8fa:	bb 9a       	sbi	0x17, 3	; 23

000008fc <i2c_put_ack_high>:
i2c_put_ack_high:
	rcall	i2c_delay_T2	;delay T/2
 8fc:	a2 df       	rcall	.-188    	; 0x842 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
 8fe:	bc 98       	cbi	0x17, 4	; 23

00000900 <i2c_put_ack_wait>:
i2c_put_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high
 900:	b4 9b       	sbis	0x16, 4	; 22
	rjmp	i2c_put_ack_wait
 902:	fe cf       	rjmp	.-4      	; 0x900 <i2c_put_ack_wait>
	rcall	i2c_delay_T2	;delay T/2
 904:	9e df       	rcall	.-196    	; 0x842 <i2c_delay_T2>
	mov	r24,r23
 906:	87 2f       	mov	r24, r23
	clr	r25
 908:	99 27       	eor	r25, r25
	ret
 90a:	08 95       	ret

0000090c <calibrateOscillator>:
 * signal (a single SE0 bit) repeating every millisecond immediately after
 * a USB RESET. We first do a binary search for the OSCCAL value and then
 * optimize this value with a neighboorhod search.
 */
void    calibrateOscillator(void)
{
 90c:	ef 92       	push	r14
 90e:	ff 92       	push	r15
 910:	0f 93       	push	r16
 912:	1f 93       	push	r17
 914:	cf 93       	push	r28
 916:	df 93       	push	r29
 918:	80 e8       	ldi	r24, 0x80	; 128
 91a:	f8 2e       	mov	r15, r24
 91c:	00 e0       	ldi	r16, 0x00	; 0
 91e:	c0 e0       	ldi	r28, 0x00	; 0
 920:	d0 e0       	ldi	r29, 0x00	; 0
uchar       trialValue = 0, optimumValue;
int         x, optimumDev, targetValue = (unsigned)(1499 * (double)F_CPU / 10.5e6 + 0.5);

    /* do a binary search: */
    do{
        OSCCAL = trialValue + step;
 922:	10 2f       	mov	r17, r16
 924:	1f 0d       	add	r17, r15
 926:	11 bf       	out	0x31, r17	; 49
        x = usbMeasureFrameLength();    /* proportional to current real frequency */
 928:	1b de       	rcall	.-970    	; 0x560 <usbMeasureFrameLength>
 92a:	9c 01       	movw	r18, r24
        if(x < targetValue)             /* frequency still too low */
 92c:	89 e0       	ldi	r24, 0x09	; 9
 92e:	24 33       	cpi	r18, 0x34	; 52
 930:	38 07       	cpc	r19, r24
 932:	0c f0       	brlt	.+2      	; 0x936 <calibrateOscillator+0x2a>
 934:	10 2f       	mov	r17, r16
            trialValue += step;
        step >>= 1;
 936:	f6 94       	lsr	r15
 938:	21 96       	adiw	r28, 0x01	; 1
    }while(step > 0);
 93a:	c8 30       	cpi	r28, 0x08	; 8
 93c:	d1 05       	cpc	r29, r1
 93e:	11 f0       	breq	.+4      	; 0x944 <calibrateOscillator+0x38>
 940:	01 2f       	mov	r16, r17
 942:	ef cf       	rjmp	.-34     	; 0x922 <calibrateOscillator+0x16>
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; /* this is certainly far away from optimum */
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
 944:	11 50       	subi	r17, 0x01	; 1
 946:	11 bf       	out	0x31, r17	; 49
 948:	1f 5f       	subi	r17, 0xFF	; 255
 94a:	79 01       	movw	r14, r18
 94c:	c1 2f       	mov	r28, r17
 94e:	d0 e0       	ldi	r29, 0x00	; 0
 950:	21 96       	adiw	r28, 0x01	; 1
 952:	10 c0       	rjmp	.+32     	; 0x974 <calibrateOscillator+0x68>
        x = usbMeasureFrameLength() - targetValue;
 954:	05 de       	rcall	.-1014   	; 0x560 <usbMeasureFrameLength>
 956:	84 53       	subi	r24, 0x34	; 52
 958:	99 40       	sbci	r25, 0x09	; 9
 95a:	97 ff       	sbrs	r25, 7
 95c:	03 c0       	rjmp	.+6      	; 0x964 <calibrateOscillator+0x58>
 95e:	90 95       	com	r25
 960:	81 95       	neg	r24
 962:	9f 4f       	sbci	r25, 0xFF	; 255
        if(x < 0)
            x = -x;
        if(x < optimumDev){
 964:	8e 15       	cp	r24, r14
 966:	9f 05       	cpc	r25, r15
 968:	14 f4       	brge	.+4      	; 0x96e <calibrateOscillator+0x62>
            optimumDev = x;
            optimumValue = OSCCAL;
 96a:	11 b7       	in	r17, 0x31	; 49
 96c:	7c 01       	movw	r14, r24
    }while(step > 0);
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; /* this is certainly far away from optimum */
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
 96e:	81 b7       	in	r24, 0x31	; 49
 970:	8f 5f       	subi	r24, 0xFF	; 255
 972:	81 bf       	out	0x31, r24	; 49
 974:	81 b7       	in	r24, 0x31	; 49
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	c8 17       	cp	r28, r24
 97a:	d9 07       	cpc	r29, r25
 97c:	5c f7       	brge	.-42     	; 0x954 <calibrateOscillator+0x48>
        if(x < optimumDev){
            optimumDev = x;
            optimumValue = OSCCAL;
        }
    }
    OSCCAL = optimumValue;
 97e:	11 bf       	out	0x31, r17	; 49
}
 980:	df 91       	pop	r29
 982:	cf 91       	pop	r28
 984:	1f 91       	pop	r17
 986:	0f 91       	pop	r16
 988:	ff 90       	pop	r15
 98a:	ef 90       	pop	r14
 98c:	08 95       	ret

0000098e <__eerd_byte_tn45>:
 98e:	e1 99       	sbic	0x1c, 1	; 28
 990:	fe cf       	rjmp	.-4      	; 0x98e <__eerd_byte_tn45>
 992:	1f ba       	out	0x1f, r1	; 31
 994:	8e bb       	out	0x1e, r24	; 30
 996:	e0 9a       	sbi	0x1c, 0	; 28
 998:	99 27       	eor	r25, r25
 99a:	8d b3       	in	r24, 0x1d	; 29
 99c:	08 95       	ret

0000099e <__eewr_byte_tn45>:
 99e:	26 2f       	mov	r18, r22

000009a0 <__eewr_r18_tn45>:
 9a0:	e1 99       	sbic	0x1c, 1	; 28
 9a2:	fe cf       	rjmp	.-4      	; 0x9a0 <__eewr_r18_tn45>
 9a4:	1c ba       	out	0x1c, r1	; 28
 9a6:	1f ba       	out	0x1f, r1	; 31
 9a8:	8e bb       	out	0x1e, r24	; 30
 9aa:	2d bb       	out	0x1d, r18	; 29
 9ac:	0f b6       	in	r0, 0x3f	; 63
 9ae:	f8 94       	cli
 9b0:	e2 9a       	sbi	0x1c, 2	; 28
 9b2:	e1 9a       	sbi	0x1c, 1	; 28
 9b4:	0f be       	out	0x3f, r0	; 63
 9b6:	01 96       	adiw	r24, 0x01	; 1
 9b8:	08 95       	ret

000009ba <_exit>:
 9ba:	f8 94       	cli

000009bc <__stop_program>:
 9bc:	ff cf       	rjmp	.-2      	; 0x9bc <__stop_program>
